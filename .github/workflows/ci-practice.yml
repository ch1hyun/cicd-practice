# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle PR Test

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

permissions:
  contents: read

jobs:
  ci:
    runs-on: ubuntu-24.04
    env:
      working-directory: .


    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      ## jdk setting
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## create resources folder if not exist
      - name: create resources folder if not exist
        run: |
          if [ ! -d "./src/main/resources" ]; then
            mkdir -p ./src/main/resources
          fi

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching (빌드 시간 향상)
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## application.yml 파일 생성
      - name: make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
        working-directory: ${{ env.working-directory }}

      ## application-dev.yml 파일 생성

      ## jwt.yml 파일 생성

      ## log4j2.yml 파일 생성

      ## gradlew 실행 권한 부여 및 빌드
      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew
          ./gradlew build -x test
        working-directory: ${{ env.working-directory }}
        shell: bash

      - name: docker 로그인
        uses: docker/setup-buildx-action@v2.9.1

      - name: login docker hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker image 빌드 및 푸시
        run: |
          docker build --platform linux/amd64 -t chyun11/cicd-practice .
          docker push chyun11/cicd-practice
        working-directory: ${{ env.working-directory }}

  cd:
    needs: ci
    runs-on: ubuntu-24.04

    steps:
      - name: docker 컨테이너 배포 및 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd ~
            ./deploy.sh